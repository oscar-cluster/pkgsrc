--- lib/SystemInstaller/Partition/IA.pm.old	2005-11-30 14:02:19.695095360 +0100
+++ lib/SystemInstaller/Partition/IA.pm	2005-11-30 14:20:04.321247584 +0100
@@ -58,13 +58,13 @@
         } elsif ($main::config->diskversion eq "3") {
                 &build_aiconf_file($ipath,%DISKS);
                 &build_raidtab_file($ipath,%DISKS);
+                &build_mdadmconf_file($ipath,%DISKS);
         } else {
                 carp("Disk table version is invalid in systeminstaller.conf file.");
                 return 1;
         }
 	&create_systemconfig_conf($ipath,%DISKS);
 
-	
         return 0;
 } #read_partition_file
 
@@ -286,6 +286,43 @@
     }
 }
 
+sub build_mdadmconf_file {
+# Create a mdadm.conf file in the image
+# Input:  partition table created from input partition_file
+# Returns:
+
+    my ($image_dir,%DISKS) = @_;
+    # only RAID1 is actually supported currently (EF: Nov 30, 2005)
+    return if (!defined($DISKS{RAID0}) && !defined($DISKS{RAID1}) && !defined($DISKS{RAID5}));
+    local *RT;
+    if (-f "$image_dir/etc/mdadm.conf") {
+	&verbose("Overwriting old mdadm.conf file from image $image_dir...\n");
+    }
+    unless (open (RT,"> $image_dir/etc/mdadm.conf")) { 
+	carp("Can't open /etc/mdadm.conf in image $image_dir.");
+	return 1;
+    }
+
+    my ($sec, $min, $hour, $mday,$mon, $year, $wday, $yday, $isdst) = localtime(time);
+    $year=$year+1900;
+    $mon++;
+    my $timestamp="$year-$mon-$mday $hour:$min:$sec";
+    print RT "# This mdadm.conf file was generated by SystemInstaller.\n";
+    print RT "# This file generated at: $timestamp\n"; 
+    print RT "# from: $DISKS{FILENAME}\n";
+    print RT "# Image directory: $image_dir\n";
+
+    print RT "DEVICE partitions\n";
+    for my $rlevel ("0", "1", "5") {
+	my $rraid = "RAID$rlevel";
+	foreach my $rdev (keys %{$DISKS{$rraid}}) {
+	    my @parts = @{$DISKS{$rraid}{$rdev}};
+	    print RT "ARRAY $rdev level=$rlevel devices=".join(",",@parts)."\n";
+	}
+    }
+    close RT;
+}
+
 sub build_sfdisk_file {
 # Create a file that resembles the output of "sfdisk -l -uM <dev>" which will 
 # be used by SystemImager getimage to build a sfdisk command.  
