--- lib/SystemInstaller/Partition.pm.orig	2005-01-25 11:52:03.969654392 +0100
+++ lib/SystemInstaller/Partition.pm	2005-01-25 11:56:44.452014592 +0100
@@ -19,6 +19,8 @@
  
 #   Stacy Woods <spwoods@us.ibm.com>             
 
+#   Erich Focht <efocht@hpce.nec.com>: Added RAID1 support. (c) 2005 NEC HPCE
+
 
 use strict;
 use vars qw($VERSION @EXPORT @EXPORT_OK);
@@ -54,18 +56,39 @@
                         next;
                 }
                 # Not sure if this is the best way to handle this.
-                if (/=/) {
+                if (/^\s*[^(=|\s)]+\s*=\s*[^(=|\s)]+\s*$/) {
                         my($tag,$val)=split(/=/,$_);
                         $tag=uc($tag);
                         $DISKS{$tag}=$val;
                         next;
                 }
-                my ($part,$size,$type,$mnt,$opt,$boot) = split /\s+/,$_,6;
+
+		# RAID1 software raid definitions
+		if (/^\s*raid1\s+/) {
+		    my @parts = split /\s+/, $_;
+		    shift @parts;
+		    my $rdev = shift @parts;    # raid1 device name
+		    @{$DISKS{RAID1}{$rdev}} = @parts;
+		    next;
+		}
+
+                my ($pdev,$size,$type,$mnt,$opt,$boot) = split /\s+/,$_,6;
                 my $fstype=get_id($type);
                 if ($boot) {
                         $boot="*";
                 }
                 unless ($fstype == 0) {
+
+		    my @partitions = ();
+		    my $raid = "";
+		    # is it a software raid1 partition?
+		    if (defined($DISKS{RAID1}{$pdev})) {
+			@partitions = @{$DISKS{RAID1}{$pdev}};
+			$raid = "*";
+		    } else {
+			push @partitions, $pdev;
+		    }
+		    foreach my $part (@partitions) {
                         my %DEV=parse_dev($part);
                         my $drive="/dev/".$DEV{DRIVE};
                         push(@{$DISKS{DRIVES}{$drive}},$part);
@@ -73,15 +96,17 @@
                                 TYPE            =>$fstype,
                                 SIZE            =>$size,
                                 BOOTABLE        =>$boot,
+                                RAID            =>$raid,
                                 DEVICE          =>$part,
                                 DRIVE           =>$drive,
                                 PNUM            =>$DEV{PARTNUM},
                         );
+		    }
                 }
-                %{$DISKS{FILESYSTEMS}{$part}} = (
+                %{$DISKS{FILESYSTEMS}{$pdev}} = (
                         TYPE            =>$type,
                         MOUNT           =>$mnt,
-                        DEVICE          =>$part,
+                        DEVICE          =>$pdev,
                         OPTIONS         =>$opt,
                 );
 
--- lib/SystemInstaller/Partition/IA.pm.orig	2005-07-15 14:14:22.000000000 +0200
+++ lib/SystemInstaller/Partition/IA.pm	2005-07-15 14:16:01.000000000 +0200
@@ -20,6 +20,8 @@ package SystemInstaller::Partition::IA;
 #   Stacy Woods <spwoods@us.ibm.com>             
 #   Sean Dague <sean@dague.net>
 
+#   Erich Focht <efocht@hpce.nec.com>: Added RAID1 support. (c) 2005 NEC HPCE
+
 use vars qw($VERSION);
 $VERSION = sprintf("%d.%02d", q$Revision: 1.17 $ =~ /(\d+)\.(\d+)/);
 
@@ -53,6 +55,7 @@ sub create_partition_file {
                 &build_sfdisk_file($ipath,%DISKS);
         } elsif ($main::config->diskversion eq "3") {
                 &build_aiconf_file($ipath,%DISKS);
+                &build_raidtab_file($ipath,%DISKS);
         } else {
                 carp("Disk table version is invalid in systeminstaller.conf file.");
                 return 1;
@@ -118,10 +121,20 @@ sub build_aiconf_file {
                                 if ($DISKS{PARTITIONS}{$parname}{TYPE} == 41) {
                                         print AICONF "id=\"$DISKS{PARTITIONS}{$parname}{TYPE}\" ";
                                 }
+				my $flags;
                                 if ($DISKS{PARTITIONS}{$parname}{BOOTABLE} ) {
-                                        print AICONF "flags=\"boot\" ";
+				    $flags="boot";
                                 }
-
+                                if ($DISKS{PARTITIONS}{$parname}{RAID} ) {
+				    if ($flags) {
+					$flags .= ",raid";
+				    } else {
+					$flags="raid";
+				    }
+                                }
+				if ($flags) {
+                                        print AICONF "flags=\"$flags\" ";
+				}
                                 print AICONF "/>\n";
                         } elsif ((! $extparcreated )&&(defined $DISKS{PARTITIONS}{$disk."5"}) ){
                                 print AICONF "\t\t<part num=\"$parnum\" size=\"\*\" ";
@@ -136,9 +149,20 @@ sub build_aiconf_file {
                                 print AICONF "\t\t<part num=\"$DISKS{PARTITIONS}{$parname}{PNUM}\" ";
                                 print AICONF "size=\"$DISKS{PARTITIONS}{$parname}{SIZE}\" ";
                                 print AICONF "p_type=\"logical\" ";
+				my $flags;
                                 if ($DISKS{PARTITIONS}{$parname}{BOOTABLE} ) {
-                                        print AICONF "flags=\"boot\" ";
+				    $flags="boot";
                                 }
+                                if ($DISKS{PARTITIONS}{$parname}{RAID} ) {
+				    if ($flags) {
+					$flags .= ",raid";
+				    } else {
+					$flags="raid";
+				    }
+                                }
+				if ($flags) {
+                                        print AICONF "flags=\"$flags\" ";
+				}
                                 print AICONF "/>\n";
                         }
                 }        
@@ -206,6 +230,52 @@ sub build_aiconf_file {
         return 0;
 } # build_aiconf_file
 
+sub build_raidtab_file {
+# Create a raidtab file to be used
+# be used by SystemImager's mkautoinstallscript.
+# Input:  partition table created from input partition_file
+# Returns:
+
+    my ($image_dir,%DISKS) = @_;
+    return if (!defined($DISKS{RAID1}));
+    local *RT;
+    if (-f "$image_dir/etc/raidtab") {
+	&verbose("Overwriting old raidtab file...\n");
+    }
+    unless (open (RT,"> $image_dir/etc/raidtab")) { 
+	carp("Can't open /etc/raidtab in image.");
+	return 1;
+    }
+
+    my ($sec, $min, $hour, $mday,$mon, $year, $wday, $yday, $isdst) = localtime(time);
+    $year=$year+1900;
+    $mon++;
+    my $timestamp="$year-$mon-$mday $hour:$min:$sec";
+    print RT "# This raidtab file was generated by SystemInstaller\n";
+    print RT "# for use by SystemImager when creating the autoinstall script.\n";
+    print RT "# This file generated at: $timestamp\n"; 
+    print RT "# from: $DISKS{FILENAME}\n";
+    print RT "# Image directory: $image_dir\n";
+
+    foreach my $rdev (keys %{$DISKS{RAID1}}) {
+	my @parts = @{$DISKS{RAID1}{$rdev}};
+	my $nrdisks = scalar(@parts);
+	if ($nrdisks > 2) {
+	    print "WARNING: Software RAID1 supports only 2 disks, no spare disks!\n";
+	    $nrdisks = 2;
+	}
+	print RT "raiddev                   $rdev\n";
+	print RT "   raid-level             1\n";
+	print RT "   nr-raid-disks          $nrdisks\n";
+	print RT "   chunk-size             64k\n";
+	print RT "   persistent-superblock  1\n";
+	print RT "   nr-spare-disks         0\n";
+	for (my $i=0; $i<$nrdisks; $i++) {
+	    print RT "      device             $parts[$i]\n";
+	    print RT "      raid-disk          $i\n";
+	}
+    }
+}
 
 sub build_sfdisk_file {
 # Create a file that resembles the output of "sfdisk -l -uM <dev>" which will 
@@ -314,14 +384,25 @@ sub create_systemconfig_conf {
 	my ($ipath,%DISKS) = @_;
 
 	&verbose("Modifying systemconfig.conf file for image."); 
+	my ($rootdev, $bootdev);
         foreach my $dev (keys %{$DISKS{FILESYSTEMS}}) {
                 if ($DISKS{FILESYSTEMS}{$dev}{MOUNT} eq "/") {
-                        my $drive=$dev;
-                        $drive=~s/[0-9]*$//;
-                        return write_scconf($ipath,$dev,$drive);
+                        $rootdev=$dev;
                 }
+		if ($DISKS{FILESYSTEMS}{$dev}{MOUNT} =~ m/\/boot/) {
+			$bootdev=$dev;
+		}
 	}
-	return 1;
+	if (!$rootdev) {
+		return 1;
+	}
+	if (!$bootdev) {
+		$bootdev=$rootdev;
+	}
+	if (!($bootdev =~ m:/dev/md:)) {
+		$bootdev =~ s/[0-9]*$//;
+	}
+	return write_scconf($ipath, $rootdev, $bootdev);
 } # create_systemconfig_conf
 
 =head1 NAME
