#!/usr/bin/env perl
#
# Copyright (c) 2010        Oak Ridge National Laboratory.
#                           Geoffroy R. Vallee <valleegr@ornl.gov>
#                           All rights reserved.
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use Getopt::Long;

my ($get_config, $update, $get_images_config);

Getopt::Long::Configure("pass_through");
GetOptions(
        "get-local-config"      => \$get_config,
        "get-images-config"     => \$get_images_config,
        "update"                => \$update,
        "help"                  => \&help,
        ) || help_and_die();

# We do not include all the needed Perl modules here because some functions
# are executed in chroot env when dealing with images, in such cases, not all
# Perl modules are available.
use OSCAR::SystemUpdate;

# TODO we should have a unique definitation of that path

# On the compute nodes, we save the list of binary packages from the image 
# there:
our $remote_list = "/tmp/image_package_list.txt";
# On the compute nodes, we save the list of installed packages there:
our $output_file = "/tmp/local_package_list.txt";
# When getting the list of binary packages in the image, we save it there:
our $list_package = "/tmp/list_binary.txt";
# File where we save the diff between image packages and local packages
our $diff_file = "/tmp/oscar-update.diff";

sub do_system_update {
    my (@to_install, @to_remove);
    
    # We check we have the list of binary packages from the image
    if (! -f $remote_list) {
        carp "ERROR: file $remote_list does not exist";
        return -1;
    }

    # We get the list of local binary packages
    if (OSCAR::SystemUpdate::get_list_local_binary_packages ($output_file)) {
        carp "ERROR: Impossible to get the list of local binary packages";
        return -1;
    }
    if (! -f $output_file) {
        carp "ERROR: Impossible to get local binary packages ($output_file)";
        return -1;
    }

    # We compare the two lists
    my $cmd = "diff -u $remote_list $output_file > $diff_file";
    # Diff returns 0 if no diff, 1 else.
    if (!system ($cmd)) {
        print "[INFO] System is up-to-date\n";
        return 0;
    }

    # Initialization of PackMan
    my $os = OSCAR::OCA::OS_Detect::open ();
    if (!defined $os) {
        carp "ERROR: Impossible to decompose the distro ID";
        return -1;
    }

    my $pm;
    require OSCAR::PackMan;
    require OSCAR::PackManDefs;
    if ($os->{pkg} eq "deb") {
        $pm = OSCAR::PackMan::DEB->new;
    } elsif ($os->{pkg} eq "rpm") {
        $pm = OSCAR::PackMan::RPM->new;
    } else {
        carp "ERROR: Unknown binary package format (".$os->{pkg}.")";
        return -1;
    }

    if (!defined $pm) {
        carp "ERROR: Impossible to create a PackMan object";
        return -1;
    }
    require OSCAR::PackagePath;
    my $distro = OSCAR::PackagePath::get_distro ();
    if (!OSCAR::Utils::is_a_valid_string ($distro)) {
        carp "ERROR: Distro not specified and detection impossible";
        return -1;
    }
    $pm->{Distro} = $distro;

    # We figure out which packages need to be installed/removed
    open (FILE, "$diff_file")
        or (carp "ERROR: Impossible to open $diff_file", return -1);
    my @lines = <FILE>;
    close (FILE);
    foreach my $l (@lines) {
        # We want to catch the lines starting with - or + but excluding the
        # diff header.
        if ($l !~ /^\-\-(.*)/ && $l =~ /^\-(.*)/) {
            push (@to_install, $1);
        }
        if ($l !~ /^\+\+(.*)/ && $l =~ /^\+(.*)/) {
            push (@to_remove, $1);
        }
    }

    if (scalar (@to_install)) {
        OSCAR::Utils::print_array (@to_install);
        print $pm->status;
        my ($err, @out) = $pm->smart_install (@to_install);
        if ($err == OSCAR::PackManDefs::ERROR()) {
            carp "ERROR: $err error(s) occured for prereq "
                 .join(", ", @to_install)."(".join("\n",@out).")";
            return -1;
        }
    }
    if (scalar (@to_remove)) {
        OSCAR::Utils::print_array (@to_remove);
        print "[WARN] We do not know yet how to coherently remove packages";
        return -1;
    }

    return 0;
}

sub get_local_config {

    # We get the list of the installed binary packages on the local system
    if (OSCAR::SystemUpdate::get_list_local_binary_packages ($list_package)) {
        carp "ERROR: Impossible to get binary package list ($list_package)";
        return -1;
    }

    return 0;
}

sub get_images_config {
    my @img; # used for store the result of a SQL cmd
    my @image_ids;
    my @images;

    # Get the list of all images with nodes associated
    require OSCAR::Database;
    require OSCAR::Database_generic;
    my $sql = "SELECT id FROM Images";
    if (OSCAR::Database_generic::do_select ($sql, \@img, undef, undef) != 1) {
        carp "ERROR: Impossible to execute $sql";
        return -1;
    }    
    foreach my $i (@img) {
        push (@image_ids, $i->{'id'});
    }
    my @hosts;
    my $image_name;
    foreach my $id (@image_ids) {
        @hosts = ();
        $sql = "SELECT hostname FROM Nodes WHERE image_id=\'$id\'";
        if (OSCAR::Database_generic::do_select ($sql, \@hosts, 
                                                undef, undef) != 1) {
            carp "ERROR: Impossible to execute $sql";
            return -1;
        }
        if (scalar(@hosts) > 0) {
            # If the image has clients, we get the image name
            @img = ();
            $sql = "SELECT name FROM Images WHERE id='$id'";
            $image_name = OSCAR::Database::oda_query_single_result ($sql, 
                                                                    "name");
            push (@images, $image_name);
        }
    }
    OSCAR::Utils::print_array (@images);

    # Get the config of each images
    foreach my $image (@images) {
        if (OSCAR::SystemUpdate::get_package_list_from_image ($image)) {
            carp "ERROR: Impossible to get package list for $image";
            return -1;
        }
    }

    return 0;
}

sub help_and_die {
    die "ERROR";
}

if ($get_config) {
    get_local_config ();
    exit (0);
}

if ($get_images_config) {
    get_images_config ();
    exit (0);
}

if ($update) {
    do_system_update();
    exit (0);
}

__END__

=head1 NAME

oscar-system-update, a command line tool for managing system updates.

=head1 SYNOPSIS

oscar-system-update OPTIONS

=head1 DESCRIPTION

oscar-system-update is a command line tool for managing system updates.

=head1 SYNTAX

oscar-system-update [options]

=head1 OPTIONS

Recognized options are:

=over 8

=item --get-local-config

Get the local config.

=item --get-images-config

Get the image config

=item --update

Does an update

=item --help

Displays syntax.

=back

=head1 TODO

=over 8

=item Update this doc

=back

=head1 AUTHOR

Geoffroy R. Vallee <valleegr@ornl.gov>

=head1 SEE ALSO

L<oscar(1)>


=cut

