<!DOCTYPE article PUBLIC " -//OASIS//DTD DocBook V3.1//EN" "http://oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<article class="whitepaper" id="documentation" lang="en">

<artheader> <title>OSCAR Selector Manual</title>

<author>

<firstname>Geoffroy</firstname>
<surname>Vallee</surname>

<affiliation>
<address><email>valleegr@ornl.gov</email></address>
</affiliation>
</author>

</artheader>

<sect1><title>Introduction</title>

<para>
  User front-end for the selection of OSCAR packages that need to be installed.
  It means that Selector is only in charge of providing a user interface for
  such selection and storing the selection data via ODA. Note, Selector does 
  <emphasis>not</emphasis> actually track package installation status.
  Selector is based on the notion of <emphasis>package sets</emphasis>, 
  which are lists of OSCAR packages (OPKGs).  Note, the merging of package sets
  forms a new package set containing the union of OPKGs in the
  originating package sets.
</para>

<para>
  Based on this idea the user tries to setup a cluster that may have different
  partitions, each <emphasis>partition</emphasis> could be based on
  different Linux distributions; the headnode and compute nodes may be based
  on different Linux distributions -- each distribution may have different
  package sets -- so Selector must check that the final configuration is
  coherent (e.g., the OPKGs that need to be installed on a given partition have
  the server side available for the headnode).
</para>

<para>
  Repositories for OSCAR packages can be local or online. Selector does not
  actually need to manage those repository, we only assume that the list of
  repositories for a given Linux distribution are defined in the OSCAR 
  repository configuration file (e.g., /tftpboot/distro/debian-4-x86_64.url).
</para>

</sect1>

<sect1><title>Selector and OSCAR Repositories</title>
  <para>
    Selector assumes that all OSCAR packages are available via binary packages 
    available on OSCAR repositories. Those OSCAR repositories can be local or
    remote.
  </para>
  <para>
    Selector does not actually need to know anything about the underlying OSCAR
    repository: when a list of OSCAR packages are selected from a package set,
    the package set is associated to a Linux distribution and that Linux 
    distribution is set up for the usage of a set of OSCAR repositories. In
    other terms, Selector only needs to deal with user input, the management of
    OSCAR repositories and the handling of binary packages is performed by the 
    OSCAR Repository Manager (ORM) at a later time.
  </para>
</sect1>

<sect1><title>Package Sets and OSCAR Packages</title>

  <sect2><title>Introduction</title>
    <para>
      The notion of package set is actually not a mechanism of Selector. Package
      sets define which OSCAR packages are supported on a given Linux
      distribution (at least core OSCAR packages must be available). The actual
      implementation of the package set mechanism is actually not important for
      Selector which is using a pre-defined API for the usage of package sets.
      This API is defined in OSCAR::PackageSet.
    </para>
  </sect2>

  <sect2><title>Package Set and OSCAR Packages Selection</title>
    <para>
      Before the actual selection of OSCAR packages, users need to select a
      package set. The package sets define: the Linux distribution and the list
      of available OSCAR packages (those two being linked). The Linux
      distribution will also imply a set of repositories that can be local or
      remote (for more details about the configuration of OSCAR repositories,
      please refer to the OSCAR Repository Manager tool - ORM).
    </para>
    <para>
      <emphasis>
        NOTE THAT WE CURRENTLY ASSUME THAT ONLY ONE LINUX DISTRIBUTION IS
        SUPPORTED AT A TIME. THIS LINUX DISTRIBUTION IS DEFINED BY THE ONE
        INSTALLED ON THE HEADNODE.
      </emphasis>
    </para>
    <para>
      When the package set has been selected, the list of available OPKGs is
      displayed.
      For that, depending on the nature of the associated repositories which can
      be local or global, ORM may query remote repositories to get information
      about available packages. The remote query may create a latency, which is
      normal. Also note that since all OSCAR packages are now handled via the
      OSCAR Package Compiler (OPKGC), the tools to query local and remote
      repositories are actually the sames and abstracted from Selector by ORM.
    </para>
  </sect2>

  <sect2><title>Package Set Management</title>
    <para>
      Package sets are currently a fairly static configuration of OSCAR
      packages: a package set is typically a directory where files give the list 
      of OSCAR package for a given Linux distribution. The 
      <programlisting>
      <![CDATA[
http://svn.oscar.openclustergroup.org/trac/oscar/browser/trunk/share/package_sets/Default
        ]]>
      </programlisting>
      directory shows the list of files defining the "Default"
      package set for various Linux distributions.
    </para>
    <para>
       Because a package set is ultimately only a set of OSCAR packages, users 
	   may want to create new package sets, each package set being a specific
       configuration of a cluster. For that, standard operations such as package
       set copy, union, intersection should be available, in order to ease the
       management of package sets.
    </para>
  </sect2>

  <sect2><title>Selection Storage</title>
    <para>
      The OPKG selection defined the software configuration of a given cluster.
      This configuration is stored into the OSCAR database via ODA. For that, a
      specific API is available: set_opkgs_selection_data (please see the
      perldoc documentation associated to the OSCAR::Database module for more
      details).
      <emphasis>Group_Packages</emphasis>.is typically used for the storage of
      Selector data).
    </para>
    <para>
      This API is based on the fact that:
      <orderedlist>
        <listitem>
          The cluster is composed of <emphasis>two node groups</emphasis>: the
          headnode and compute nodes. We assume ODA already has information
          about those two groups.
        </listitem>
        <listitem>
          The selected OPKGs from a package set impacts the cluster
          configuration in two ways: the server side of OSCAR packages must be
          installed on the headnode, the client side on compute nodes. Even if 
          Selector does not have to deal with package installation or
          configuration, it means that the list of selected OPKGs has to be
          stored for both the headnode and compute nodes as <emphasis>selected
          OPKGs</emphasis>. It is <emphasis>not</emphasis> possible for a user
          to select the server-side only or the client-side only of an OSCAR
          package.
        </listitem>
      </orderedlist>
    </para>
  </sect2>

  <sect2><title>Get Selection Data From the OSCAR Database</title>
    <para>
      ODA provides a specific API is available: get_opkgs_selection_data (please
      see the perldoc documentation associated to the OSCAR::Database module for 
      more details).
    </para>
  </sect2>

</sect1>

<sect1><title>Selector Implementation</title>
  <sect2><title>Installation</title>
    <sect3><title>From Sources</title>
      The installation from sources can be done using the following command 
	  (with root privileges):
<programlisting>
      <![CDATA[
make install
        ]]>
</programlisting>
      This command installs Selector directly on your system.
    </sect3>
    <sect3><title>Using Binary Packages</title>
      <para>
        Selector is available via binary packages though the online OSCAR
        repositories. For more details about those repositories, please refer to
        the following documentation:
        <programlisting>
          <![CDATA[
http://svn.oscar.openclustergroup.org/trac/oscar/wiki/OSCARRepositories
]]>
        </programlisting>
      </para>
      <para>
        From the OSCAR repositories, get the binary package specific to your
        Linux distribution and your hardware architecture, and install it (also
        note that OSCAR repositories are yum or apt repositories therefore those
        tools can be used for the installation of Selector.
      </para>
    </sect3>
    <sect3><title>Installation During OSCAR Bootstrapping</title>
      <para>
        The OSCAR bootstrapping installs all the prereqs required by OSCAR.
        Those prereqs include Selector. In other terms, OSCAR will automatically
        install Selector during the bootstrapping phase.
      </para>
      <para>
        For more details about the OSCAR bootstrapping mechanisms, if OSCAR is
        installed on your system, please refer to
        <programlisting>
          <![CDATA[
perldoc OSCAR::Bootstrap
]]>
        </programlisting>
      </para>
    </sect3>
  </sect2>
  <sect2><title>Packaging</title>
    <para>
      Selector includes everything needed for the creation of RPM and Deb
      packages.
    </para>
    <sect3><title>RPM</title>
      <para>
        For the creation of a RPM, execute the following command as root:
        <programlisting>
          <![CDATA[
make rpm
]]>
        </programlisting>
      </para>
    </sect3>
    <sect3><title>Debian Package</title>
      <para>
        For the creation of a Debian package, execute the following command:
        <programlisting>
          <![CDATA[
make deb
                   ]]>
        </programlisting>
      </para>
    </sect3>
    <sect3><title>Creation of a Tarball</title>
      <para>
        Selector can be provided via a tarball that can be used to compile
        Selector from sources, without interaction with SVN. To create such a
        tarball from the SVN check-out, execute the following command from the
        top-level directory of the Selector source code:
<programlisting>
      <![CDATA[
make dist
        ]]>
</programlisting>
        This command creates a tarball in the top-level directory of the
        Selector source code.
      </para>
    </sect3>
  </sect2>
  <sect2><title>Implementation of the Package Set Selection</title>
    <para>
      We currently assume the following constraints:
      <itemizedlist>
        <listitem>
          Only one Linux distribution can be deployed accross the compute nodes
          and the headnode. This Linux distribution is actually defined by the
          Linux distribution installed on the headnode.
        </listitem>
        <listitem>
          The package set selected by the user is agnostic of the Linux 
          distribution. In other terms, the user selects a package set (
          "Default" for instance) and based on the local Linux distribution of
          the headnode, the list of OPKGs is retrieved combining the Linux
          distribution identifier and the package set's name.
        </listitem>
        <listitem>
          The exact same selection of OPKGs, from the exact same package set,
          has to be installed on both the compute nodes and the headnode. This
          avoid to have the client- and server-side only of a service running
          on the cluster, leading to performance degradation and unexpected
          behaviors. OSCAR has to guarantee the correct configuration of both
          the server-side and the client-side of all services provided via
          OPKGs.
        </listitem>
      </itemizedlist>
      Based on those constraints, Selector does not currently need to expose
      the Linux distribution to the user, this information is implicit; the
      user only needs to select a package set identifier ("Default" for 
      instance).
    </para>
  </sect2>
  <sect2><title>Testing</title>
    <para>
      Since only the graphical user interface (GUI) is fully integrated into the
      Selector component, we will only detail here the testing of the Selector
      GUI.
    </para>
    <para>
      Selector is a stand alone OSCAR component that only need OSCAR core
      libraries, ORM, and ODA (the database must be initialized). Therefore, in
      order to test Selector, simply install Selector on your system, go into
      the directory where Selector Perl modules are installed and run as root
      the following command:
<programlisting>
      <![CDATA[
perl ./Selector.pl
              ]]>
</programlisting>
    </para>
  </sect2>
</sect1>

<!--
<sect1><title>Conclusion</title>
</sect1>
-->

<sect1><title>TODO</title>
  <itemizedlist>
    <listitem>
      Give more details about the implementation, but we need to revisit the
      implementation first.
    </listitem>
    <listitem>
      The support of different Linux distributions for different cluster 
      partitions has to be specified.
    </listitem>
    <listitem>
      The Command Line Interface (CLI) is not yet included into the Selector
      module; the code is still directly in the OSCAR code. This code should be
      moved in the Selector module. For that, we may need to revisit the
      implementation of the graphical part and the backend.
    </listitem>
  </itemizedlist>
</sect1>

</article>

