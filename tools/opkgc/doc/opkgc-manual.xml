<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"/usr/share/xml/docbook/schema/dtd/4.4/docbook.dtd">

<article class="whitepaper" id="documentation" lang="en">
  
  <articleinfo> 
    <title>OSCAR Package Compiler Manual</title>

    <authorgroup>
      <author>
	<firstname>Geoffroy</firstname>
	<surname>Vallee</surname>
	<affiliation>
	  <address><email>valleegr@ornl.gov</email></address>
	</affiliation>
      </author>
      <author>
	<firstname>Jean</firstname>
	<surname>Parpaillon</surname>
	<affiliation>
	  <address><email>jean.parpaillon@irisa.fr</email></address>
	</affiliation>
      </author>
    </authorgroup>

  </articleinfo>

  <sect1>
    <title>Introduction</title>

    <para>
      The OSCAR Package Compiler (OPKGC) aims to generate binary
      packages (both RPMs and Debian packages) from OSCAR packages in
      order to ease their management and diffusion.
    </para>
    <para>
      The idea of an OSCAR Package (OPKG) compiler has been defined and
      presented by Erich Focht during the OSCAR meeting in January 2007.
    </para>
    <para>
      Few constraints have to be kept in mind since the OSCAR developers
      started to implement OPKGC:
      <itemizedlist>
	<listitem>
	  <para>
	    The implementation has to be simple in order to ease the
	    work of the maintainers: the development team of the OSCAR
	    project is quite small so smaller and simpler is the code,
	    better it is.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    OSCAR core components are implemented in Perl or Python,
	    therefore it is a real plus if OPKGC can do so.
	  </para>
	</listitem>
      </itemizedlist>
    </para>
    <para>
      The OPKGC works in two phases: (i) the generation of the
      <emphasis>meta-files</emphasis> for the creation of binary
      packages (e.g. the creation of a spec file for RPMs), and the
      creation of binary packages based on these meta-files.
    </para>
  </sect1>

  <sect1>
    <title>Architecture</title>

    <sect2>
      <title>Generation of Meta-Files for the Creation of Binary
      Packages</title>

      <sect3>
	<title>Introduction</title>
	
	<para>
	  OSCAR packages are described by configuration files
	  (i.e. <emphasis>config.xml</emphasis> files. The files are pretty
	  similar to meta-files for the creation of binary packages, for
	  instance they provide dependences information, package information
	  (such as version, author's information).
	</para>
	<para>
	  The idea is therefore to use the <emphasis>config.xml</emphasis>
	  files to generate meta-files for binary packages. Typically that
	  OPKGC allows developers to generate meta-files for binary packages
	  for different distribution. For instance, they may want to execute
	  the following command for the generation of binary package
	  meta-files for RHEL: <emphasis>opkgc --rpm="rhel"
	  config.xml</emphasis>. This command will parse the configuration
	  file of the OPKG and generate the appropriate binary package
	  meta-files.
	</para>
      </sect3>
      <sect3>
	<title>Implementation</title>
	<para>
	  The core of the mechanism for the generation of binary package
	  meta-files is divided into two parts: (i) the parsing of the
	  <emphasis>config.xml</emphasis>, and (ii) the transformation
	  of this XML files to a binary package meta-file.
	</para>
	<para>
	  Configuration files being XML documents, and since a lot of
	  parsers are today available, the goal for OPKGC is therefore
	  to not implement a new parser but use an existing one. That
	  will ease the OPKGC maintenance and will avoid bugs implied by
	  the implementation of a new parser.
	</para>
	<para>
	  For the transformation of <emphasis>config.xml</emphasis> into
	  binary package meta-files, a solution is to use XSLT, a
	  standard set of tools for the transformation of XML
	  documents. This approach has the advantage to not need to
	  implement a new mechanism for the transformation, we only have
	  to write the XSLT stylesheet which describes the
	  transformation. The drawback of that approach is that XSLT is
	  not really a progamming language and therefore the syntax and
	  the way XSLT is working may seem non trivial (cf. parameters
	  management).
	</para>
	<para>
	  Therefore OPKGC is composed of two parts: (i) XSLT stylesheets
	  that describe the needed transformation for the generation of
	  binary package meta-package, and (ii) a python code that
	  drives the XSLT and generate the packages.
	</para>
      </sect3>
    </sect2>

    <sect2>
      <title>Creation Binary Packages Configuration Files for Specific
      Linux Distributions</title>
      <para>
	OSCAR package configuration files
	(<emphasis>config.xml</emphasis>) may integrate filter for the
	specification of parameters for different Linux
	distribution. For instance, it is possible to specify that the
	OPKG lam-oscar depends on Red Hat Entreprise Linux on the
	<emphasis>lam-mpi</emphasis> RPM, whereas on Mandriva, it
	depends on the <emphasis>lam</emphasis> RPM.  The OPKGC should
	then allows developers to specify the Linux distribution for
	which they want to generate binary packages (for instance using
	a command such as <emphasis>opkgc -rpm="rhel"
	config.xml</emphasis>).  The specification of such dependences
	in the confiugration files disable the capability to have one
	single generic XSL template for the generation of binary
	packages.
      </para>
      <para>
	Typically the way to deal with such a solution is to set a
	parameter when compiling an OPKC; paramater that gives the
	target Linux distribution. The standard mechanism for the
	implementation of such a solution is to combine XSLT
	stylesheets. A first stylesheet give a generic template and a
	second template define a constant (a parameter in the XSLT
	terminology) defining the target Linux distribution. Therefore
	when combining the two stylesheets, the final stylesheets
	includes both the generic template and a variable that sets the
	target Linux distribution. Therefore, only the stylesheet
	defining the variable for the specification of the target Linux
	distribution must be dynamically generated based on the OPKGC
	parameters (simple task).
      </para>
    </sect2>
  </sect1>
</article>

