#!/usr/bin/perl

# oda - OSCAR database

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Copyright (c) 2007 The Trustees of Indiana University.
#                    All rights reserved.
# Copyright (c) 2008-2009   Oak Ridge National Laboratory
#                           Geoffroy Vallee <valleegr@ornl.gov>
#                           All rights reserved.

#
# $Id$
#
use strict;

# use the oda library module from the current directory if there, 
# because we might be debugging, or use the installed directory


use lib "$ENV{OSCAR_HOME}/lib","$ENV{OSCAR_HOME}/lib/OSCAR";

use strict;
use Config;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Term::Complete;
use OSCAR::Utils;
use OSCAR::Database_generic;
use File::Basename;
use Carp;
use warnings "all";

#********************************************************************#
#                                                                    #
# list of simple built-in commands                                   #
#                                                                    #
my @simple_commands = ( "dump",                                      #
                        "restore",                                   #
                        "create_database",                           #
                        "drop_database",                             #
                        "list_databases",                            #
                        "list_fields",                               #
                        "list_tables",                               #
                        "reset_password",                            #
                        "remove_oda",                                #
                        "init"                                       #
                      );                                             #
#                                                                    #
#********************************************************************#

#********************************************************************#
# list of simple shortcut commands                                   #
#                                                                    #
my %shortcuts = ( "nodes"       => "name",                           #
                  "packages"    => "package",                        #
                  "images"      => "name",                           #
                  "nics"        => "ip",                             #
                  "networks"    => "name",                           #
                  "groups"      => "name",                           #
                  "clusters"    => "name",                           #
                );                                                   #
#                                                                    #
#********************************************************************#

# set default option values
my %options = ( 'debug'        => 0,
                'scripts_dir'  => "SCRIPTS_DIR",
                'raw'          => 0,
                'verbose'      => 0 );


#=============================================================
# function to print program usage message and then a quick
# help message and then exit with error

sub errexit ($@) {
    my ( $exit_status, @error_strings ) = @_;
    my $progname = $0;
    print STDERR <<ERREXIT;

For more usage information, try:

$0 --help

ERREXIT
    print STDERR "\n" if @error_strings;
    foreach my $error_string ( @error_strings ) {
    print STDERR "$0 - ERROR - $error_string\n";
    }
    exit $exit_status;
}


#********************************************************************#
# Function to separate the arguments from a command line             #
#                                                                    #
# inputs:  options        reference to options hash                  #
#          command        command line string                        #
# outputs: cmd_args   reference to array of separated cmd and args   #
#          any error messages are written to stderr,                 #
#********************************************************************#
sub separate_command_arguments ($$) {
    my ( $options_ref,
         $command_arguments ) = @_;

    my @separated_command_arguments =
    split( '\s+', $command_arguments );

    return \@separated_command_arguments;
}


#********************************************************************#
# Function to check to see if the oscar database exists              #
#                                                                    #
# inputs:  options        reference to options hash                  #
#          error_string   reference to contain any error messages    #
# outputs: staus          1 if exist, otherwise 0                    #
#********************************************************************#
sub exist_oscar_database ($$) {
    my ( $options_ref,
         $error_strings_ref ) = @_;
    my %databases = ();
    require OSCAR::oda;
    OSCAR::oda::list_databases( $options_ref,
                         \%databases,
                         $error_strings_ref );
    my $status = 0;
    $status = 1 if $databases{oscar};

    return $status;
}


#********************************************************************#
# Function to check to see if a user inputs "Y" or "N"               #
#                                                                    #
# inputs:  messages       string of messages to show in the question.#
# outputs: answer         "Y" or "N"                                 #
#********************************************************************#
sub check_yes_or_no ($) {
    my $messages = shift;
    my $answer = "";
    while(!($answer eq "Y" || $answer eq "N")){
        print "\n";
        print "$messages";
        chomp($answer = <STDIN>);
        $answer =~ s/([a-z])/\u$1/ig;
    }
    return $answer;
}

sub get_dump_dir ($) {
    my ($db_type) = @_;
    my $dump_dir;

    if (defined $ENV{OSCAR_HOME}) {
        $dump_dir = "$ENV{OSCAR_HOME}/tmp/oda_dump";
    } else {
        $dump_dir = "/tmp/oda_dump";
    }

    if (!-e $dump_dir) {
        mkdir $dump_dir or (carp "ERROR: Impossible to create $dump_dir",
                            return undef);
    }

    if ($db_type eq "Pg") {
        $dump_dir .= "/PGSQL";
    }

    if ($db_type eq "mysql") {
        $dump_dir .= "/MySQL";
    }

    return $dump_dir;
}

# Return: 0 if success, -1 else.
sub remove_oda_database ($$$$) {
    my ($command, $arguments, $options_ref, $error_strings) = @_;
    my $answer = "Y";

    if (@$arguments) {
        push (@$error_strings,
              "ERROR: No other arguments allowed with $command");
        return -1;
    }

    my $status = exist_oscar_database($options_ref,
                                      $error_strings);
    if( !$status ) {
        print "ERROR: The database($$options_ref{database}) does not exist!!!\n";
        print "You can not drop a database($$options_ref{database}) not existing\n";
        return -1;
    }

    if ($$options_ref{interactive} == 1) {
        print "Warning: This operation removes the $$options_ref{database}".
              " database, user, and its all permissions\n";
        print "Warning: once your oscar database is dropped, you will get ".
              "out of this console\n";
        print "Warning: ODA will be ready to create a new oscar database\n";

        my $msg = "Do you really  want to remove oda (y/n)? ";
        $answer = check_yes_or_no($msg);
    }

    if ( $answer eq "Y" ){
        OSCAR::oda::oda_disconnect($options_ref, undef);
        if (!OSCAR::oda::remove_oda($options_ref, $error_strings )) {
            carp "ERROR: Impossible to remove ODA";
            return -1;
        }
    }

    return 0;
}

# Return: 0 if success, -1 else.
sub drop_oda_database ($$$$) {
    my ($command, $arguments, $options_ref, $error_strings) = @_;

    if (@$arguments){
        push (@$error_strings,
              "ERROR: No other arguments allowed with $command");
        return -1;
    }

    my $status = exist_oscar_database( $options_ref,
                                       $error_strings );
    if (!$status) {
        print "The database($$options_ref{database}) does not exist!!!\n";
        print "You can not drop a database($$options_ref{database}) not existing\n";
    }

    print "Warning: once your oscar database is dropped, you will get out of this console\n";
    print "Warning: ODA will be ready to create a new oscar database\n\n";

    my $msg = "Do you really  want to remove oda (y/n)? ";
    my $answer = check_yes_or_no($msg);
    if ( $answer eq "Y" ){
        if (!OSCAR::oda::drop_database($options_ref, $error_strings)) {
            carp "ERROR: Impossible to drop the database";
            return -1;
        }
    }

    return 0;
}

# Return: 0 if success, -1 else.
sub list_oda_databases ($$$$) {
    my ($command, $arguments, $options_ref, $error_strings) = @_;
    my @result_strings;

    if (@$arguments) {
        push (@$error_strings, "ERROR: No other arguments allowed with $command");
        return -1;
    }

    if (!exist_oscar_database( $options_ref, $error_strings )) {
        print "The OSCAR database does not exist\n";
        print "Please restore a dump file or create a new oscar database\n";
    }

    my %databases;
    my $success = OSCAR::oda::list_databases( $options_ref, \%databases, $error_strings );
    #print Dumper(\%databases);
    #if ( defined $all_database_names_ref ) {
    #    @result_strings = sort keys %$all_database_names_ref;
    #}
    @result_strings = sort keys %databases if $success;

    return @result_strings;
}

# Return: 0 if success, -1 else.
sub list_oda_tables ($$$$) {
    my ($command, $arguments, $options_ref, $error_strings) = @_;
    my @result_strings;

    if (@$arguments) {
        push (@$error_strings, "ERROR: No other arguments allowed with $command");
        return -1;
    }

    if (!exist_oscar_database( $options_ref, $error_strings )) {
        print "The OSCAR database does not exist\n";
        print "Please restore a dump file or create a new oscar database\n";
    }

    my $all_table_names_ref = OSCAR::oda::list_tables( $options_ref, $error_strings );
    if ( defined $all_table_names_ref ) {
        @result_strings = sort keys %$all_table_names_ref;
    }

    return @result_strings;
}

sub display_cmd_result ($$) {
    my ($result_strings, $error_strings) = @_;

    if ( ! @$error_strings ) {
        foreach my $result_string ( @$result_strings ) {
            print "$result_string\n";
        }
    }

    return 0;
}

# Return: array with the list of fields, undef if error.
sub list_oda_fields ($$$$) {
    my ($command, $arguments, $options_ref, $error_strings) = @_;
    my @result_strings;

    if (!exist_oscar_database( $options_ref, $error_strings )) {
        carp "The OSCAR database does not exist\nPlease restore a dump file or create a new oscar database\n";
        return undef;
    }

    if ( ! @$arguments ) {
        print "[WARN] Missing table name for $command!!!\n";
        print "Here is the list of the OSCAR tables:\n";
        print "====================================\n";
        my @tables = ();
        my $all_table_names = OSCAR::oda::list_tables( $options_ref, $error_strings );
        @tables = sort keys %$all_table_names if ( defined $all_table_names );
        foreach my $table (@tables){
            print "$table\n";
        }
        print "====================================\n";
        my $interactive_fields = "";
        while( !$$all_table_names{$interactive_fields} ){
            print "Please enter a table name for $command: ";
            $interactive_fields = Complete('', \@tables);
            chomp($interactive_fields);
        }
        push (@$arguments, $interactive_fields);
    }
    my $table_name = shift @$arguments;
    $table_name = ucfirst($table_name);
    if ( @$arguments ) {
        push (@$error_strings,
              "ERROR: No other arguments besides table name allowed with $command");
        return undef;
    } else {
        my %fields;
        if (OSCAR::oda::list_fields($options_ref, $table_name, \%fields, @$error_strings )) {
            @result_strings = sort keys %fields;
        } else {
            carp "ERROR: Impossible to get the list of the fields";
            return undef;
        }
    }

    return @result_strings;
}

sub dump_oda_database ($$$$$) {
    my ($command, $arguments, $dump_dir, $options_ref, $error_strings) = @_;
    my $dump_file;

    system("mkdir -p $dump_dir") if !-d $dump_dir;
    # If the user specify a directory where to dump the database, it overwrites
    # the default directory.
    if (@$arguments) {
        my $usr_dump_file = shift @$arguments;
        if (scalar (@$arguments) != 0) {
            print "[WARN] the command accepts only one argument and several arguments are specified. Just ignoring extra arguments";
        }
        my $usr_dump_dir = dirname($usr_dump_file);
        if (! -d $usr_dump_dir || $usr_dump_dir eq "") {
            $dump_file = $usr_dump_file;
            $dump_dir = $usr_dump_dir;
        } else {
            push (@$error_strings,
                  "ERROR: No other arguments allowed with $command");
            return -1;
        }
    }

    if (!exist_oscar_database( $options_ref, $error_strings )) {
        carp "ERROR: The OSCAR database does not exist\nPlease restore a dump file or create a new oscar database\n";
        return -1;
    }

    chomp(my $today = `date +%Y-%m-%d`);
    my $sh_cmd = "";
    $dump_file = "$dump_dir/oscar.$today.$$" if !$dump_file;
    if ( $$options_ref{type} eq "Pg" ) {
        $sh_cmd =
            "PGPASSWORD='$$options_ref{password}' pg_dump "
            . "-h $$options_ref{host} "
            . "-U $$options_ref{user} $$options_ref{database}"
            . " > $dump_file";
    } elsif ( $$options_ref{type} eq "mysql" ) {
        $sh_cmd =
            "mysqldump -u oscar -p$$options_ref{password} "
            . " --databases $$options_ref{database} > $dump_file";
    } else {
        carp ("ERROR: Unknown database type $$options_ref{type}");
        return -1;
    }

    if (OSCAR::oda::do_shell_command( $options_ref, $sh_cmd, $error_strings ) != 1) {
        carp "ERROR: Impossible to execute $sh_cmd";
        return -1;
    }

    print "The OSCAR database is successfully backed up to $dump_file\n";

    return 0;
}

sub restore_oda_database ($$$$$) {
    my ($command, $arguments, $dump_dir, $options_ref, $error_strings) = @_;
    my $dump_file = "";
    my ($answer, $msg);
    my @dump_files;

    # We check if the user specified the dump file via the command line. If not,
    # We scan the default dump directory.
    if (@$arguments) {
        $dump_file = shift @$arguments;
        if (scalar (@$arguments) != 0) {
            print "[WARN] the command accepts only one argument and several arguments are specified. Just ignoring extra arguments";
        }
    } else {
        # We get the list of all the files in the directory where the
        # database dump is supposed to be.
        chdir "$dump_dir" or (carp "ERROR: Can not chdir to $dump_dir: $!",
                            return -1);
        @dump_files = glob "oscar.*";
        my @cmd_args = ();
        if (scalar (@dump_files) == 0) {
            # If we do not find any dump file, we ask the user if he wants to
            # create one. If not, this is an error.
            print "DUMP files does not exist in $dump_dir\n";
            $msg = "You have never dumped your OSCAR database\n" .
                   "Do you want to dump your oda now (y/n)? ";
            $answer = check_yes_or_no($msg);
            @cmd_args = ("dump");
            if ($answer eq "N") {
                carp "ERROR: dump file not found";
                return -1;
            }

            # We actually create a new dump of the database.
            execute_simple_command($options_ref, \@cmd_args);

            # Since we created a new database dump, we scan the dump directory
            # again.
            @dump_files = glob "oscar.*";
        }
    }

    # Some error checking
    if ($dump_file eq "" && scalar(@dump_files) == 0) {
        carp "ERROR: Impossible to find a valid dump file";
        return -1;
    }

    # Now we have candidates as valid dump file.
    if ($dump_file eq "") {
        # If we have a list of candidates, we ask the user to choose one.
        if (scalar (@dump_files) > 1) {
            print "List of dump files: ".join(", ", @dump_files),"\n";
            print "Enter the name of the dump file to restore: ";
            chomp($dump_file = <STDIN>);
        } else {
            # If we found a single file, we pick it.
            $dump_file = $dump_files[0];
        }

        # Now we know exactly where is the file.
        if( -e "$dump_dir/$dump_file" ){
            $dump_file = "$dump_dir/$dump_file";
        }
    }


    if  (! -e $dump_file) {
        carp "ERROR: The dump file ($dump_file) does not exist!!!";
    }

    # Now we prepare the cmd to actually restore the database
    my $sh_cmd = "";
    if ($$options_ref{type} eq "Pg") {
        $sh_cmd = "PGPASSWORD='$$options_ref{password}' pgsql -U "
                . "$$options_ref{user} -h $$options_ref{host} "
                . "$$options_ref{database} < $dump_file";
    } elsif ($$options_ref{type} eq "mysql") {
        $sh_cmd = "mysql -u oscar -p$$options_ref{password} oscar < $dump_file";
    } else {
        carp "ERROR: Invalid database type ($$options_ref{type})";
        return -1;
    }

    $answer = "Y";
    if (exist_oscar_database( $options_ref, $error_strings )) {
        print "The database($$options_ref{database}) already exist!!!\n";
        print "This operation will drop all your old tables on the "
              . "database($$options_ref{database})\nif they exists "
              . "and restore your oscar database with the ones from "
              . "the dump.\n";
        $msg = "Do you want to proceed (y/n)? ";
        $answer = check_yes_or_no($msg);
    } else {
        OSCAR::oda::create_database( $options_ref, $error_strings);
    }

    OSCAR::oda::do_shell_command( $options_ref, $sh_cmd, $error_strings ) if $answer eq "Y";

    return 0;
}

sub reset_oda_password ($$$$) {
    my ($command, $arguments, $options_ref, $error_strings) = @_;

    my $odapw_file = "/etc/odapw";
    my $odapw_script = "$ENV{OSCAR_HOME}/scripts/make_database_password";
    my $answer = "";
    my $cmd;

    if (! -e $odapw_file) {
        $cmd = "touch $odapw_file";
        if (system ($cmd)) {
            carp "ERROR: Impossible to execute $cmd";
            return -1;
        }
    }
    $cmd = "cp -p /etc/odapw{,.bak}";
    if (system ($cmd)) {
        carp "ERROR: Impossible to execute $cmd";
        return -1;
    }

    my $msg = "Note: OSCAR creates a random password for your convenience\n"
            . "Do you want to make your own password (y/n)? ";
    $answer = check_yes_or_no($msg);
    if($answer eq "Y"){
        print "\nEnter a new password: ";
        # stty plays with the terminal characteristics.
        # After disabling echo, anything the user types will no
        # longer show up on screen.
        # Disabling icanon disables buffering. If buffering is
        # enabled, you'll get stdin strings only after the user
        # presses enter.

        $cmd = "stty -echo -icanon";
        if (system ($cmd)) {
            carp "ERROR: Impossible to execute $cmd";
            return -1;
        }

        # use sysread() and syswrite() for unbuffered read/write
        my $b = "";
        while (sysread STDIN, $a, 1) {
            if (ord($a) < 32) { last; }
            $b .= $a;
            syswrite STDOUT, "*", 1; # print asterisk
        }
        open PW, "> $odapw_file";
        print PW "$b\n";
        close PW;

        # Return terminal back to standard mode
        $cmd = "stty echo icanon";
        if (system ($cmd)) {
            carp "ERROR: Impossible to execute $cmd";
            return -1;
        }
    } else {
        unlink $odapw_file or (carp "ERROR: Impossible to remove $odapw_file",
                               return -1);
        print "The old password is removed!!!\n";
        if (system($odapw_script)) {
            carp "ERROR: Impossible to execute $odapw_script";
            return -1;
        }
    }
    $msg = "Do you really want to reset your ODA password (y/n)? ";
    $answer = check_yes_or_no($msg);
    if ($answer eq "Y"){
        my $status = OSCAR::oda::reset_password($options_ref, $error_strings);
        my $file = "$odapw_file.bak";
        unlink ($file) or (carp "ERROR: Impossible to remove $file", return -1);

        # synchronize /etc/odapw across a cluster
        chomp(my $CPUSH = `which cpush`);
        if (-e $CPUSH){
            $cmd = "$CPUSH /etc/odapw";
            if (system($cmd)) {
                carp "ERROR: Impossible to execute $cmd";
                return -1;
            }
        }

        # We need to disconnect database to flush the password
        # information
        require OSCAR::oda;
        OSCAR::oda::oda_disconnect( $options_ref , undef );
    } else {
        rename ("$odapw_file.bak", "$odapw_file");
    }

    return 0;
}


#=================================================================#
# Function to execute a simple command and arguments, expanding   #
# leading simple command argument into an exact command match     #
#                                                                 #
# input:  options_ref    pointer to options hash                  #
#         cmd_args_ref   pointer to command and arguments lines   #
#                                                                 #
# output: error_strings  error strings array (empty if no errors) #
###################################################################
sub execute_simple_command ($$) {
    my ( $passed_options_ref, $command_and_arguments_ref ) = @_;

    my @error_strings = ();
    my $passed_error_strings_ref = \@error_strings;
    # take care of faking any non-passed input parameters, and
    # set any options to their default values if not already set
    require OSCAR::oda;
    my ( $options_ref, $error_strings_ref ) = OSCAR::oda::fake_missing_parameters
        ( $passed_options_ref, $passed_error_strings_ref );
    my $dump_dir = get_dump_dir($$options_ref{type});

    print "$0: execute_simple_command(" . 
    join( ',', @$command_and_arguments_ref ) . ")\n"
        if $$options_ref{debug};

    my $disconnect_flag = 0;

    # if the command is an exact simple oda commands match, ...
    my $command;
    if ( grep( /^$$command_and_arguments_ref[0]$/, 
           @simple_commands ) ||
         grep( /^$$command_and_arguments_ref[0]$/, 
           keys %shortcuts )  ||
         $$command_and_arguments_ref[0] eq "shortcuts" 
       ) {
        $command = shift @$command_and_arguments_ref;
    } else {
        $command = shift @$command_and_arguments_ref;
        print "There is no such a command($command)\n";
        print "Please try to type in \"help\" to see what command lines are ".
              "available (e.g., oda> help)\n";
    }

    # read in the function commands hash, if it fails, too bad,
    # this might not be an error at this time, but save the 
    # error strings

    my $success = 0;
    my @result_strings = ();
    my @arguments = @$command_and_arguments_ref;

    print "$command\n" if $$options_ref{debug};
    if ( $command eq "list_databases" ) {
        @result_strings = list_oda_databases ($command, \@arguments, $options_ref, \@error_strings);
        display_cmd_result (\@result_strings, \@error_strings);
    } elsif ( $command eq "create_database" ) {
        if(@arguments){
            push (@error_strings,
                  "ERROR: No other arguments allowed with $command");
        } else {
            if (OSCAR::oda::create_database( $options_ref, \@error_strings )) {
                push (@error_strings,
                      "ERROR: Impossible to create the OSCAR database");
            }
        }
    } elsif ( $command eq "remove_oda" ) {
        $$options_ref{interactive} = 1;
        if (remove_oda_database ($command, \@arguments, $options_ref, \@error_strings)) {
            push (@error_strings, "ERROR: Impossible to remove oda");
        }
    } elsif ( $command eq "drop_database" ) {
        if (drop_oda_database ($command, \@arguments, $options_ref, \@error_strings)) {
            push (@error_strings, "ERROR: Impossible to drop the database");
        }
    } elsif ( $command eq "list_tables" ) {
        @result_strings = list_oda_tables ($command, \@arguments, $options_ref, \@error_strings);
        display_cmd_result (\@result_strings, \@error_strings);
    } elsif ( $command eq "list_fields" ) {
        @result_strings = list_oda_fields ($command, \@arguments, $options_ref, \@error_strings);
        display_cmd_result (\@result_strings, \@error_strings);
    } elsif ( $command eq "dump" ) {
        if (dump_oda_database ($command, \@arguments, $dump_dir, $options_ref, \@error_strings)) {
            push (@error_strings, "ERROR: Impossible to dump the ODA database");
        }
    } elsif ( $command eq "restore" ) {
        if (restore_oda_database ($command, \@arguments, $dump_dir, $options_ref, \@error_strings)) {
            push (@error_strings, "ERROR: Impossible to restore the ODA database");
        }
    } elsif ( $command eq "reset_password" ) {
        if (reset_oda_password ($command, \@arguments, $options_ref, \@error_strings)) {
            push (@error_strings, "ERROR: Impossible to reset the ODA password");
        }
    } elsif ( $command eq "shortcuts" ) {
        foreach my $list (keys %shortcuts) {
            print "$list\n";
        }
    } else {
        if ( ! $shortcuts{$command} ){
            print "There is no such a shortcut($command)\n";
            print "Please check the list of shortcuts and then run it again\n";
            usage();
            exit 0;
        }
        my $field = undef;
        if (@arguments){
            $field = shift @arguments;
            if(@arguments){
                push @error_strings,
                "No other arguments allowed with $command";
            }
        }
        my $status = exist_oscar_database( $options_ref,
                                           \@error_strings );

        my %table_fields = ();
        foreach my $table (keys %shortcuts){
            my %fields = ();
             OSCAR::oda::list_fields($options_ref,$table,\%fields,\@error_strings);
            $table_fields{$table} = \%fields;
        }

        my $db_table = $command;
        my @results = ();
        select_table($options_ref,ucfirst($db_table),undef,undef,\@results,\@error_strings);
        $field = $shortcuts{$db_table} if ! $field;
        $db_table = ucfirst($db_table);
        if ( $table_fields{$db_table}{$field} ){
            print "List of the field($field) in $db_table";
            print "\n=================================\n";
            foreach my $ref (@results){
                print "$$ref{$field}\n";
            }
        }
    }

    OSCAR::oda::oda_disconnect($options_ref, undef) if $disconnect_flag;

    return (@error_strings);
}


#=============================================================
# function to print program usage message and possibly exit
#
# input:  interactive     non-zero means in interactive mode
#         exit_status     exit status, no exit if undefined
#         error_strings   array of error lines to output

sub usage {
    my ( $interactive, $exit_status, @error_strings ) = @_;
    errexit( $exit_status, @error_strings ) 
    if defined($exit_status) && $options{debug};
    my $progname = $0;
    print STDERR <<USAGE1;

The database resides in a single directory,
and consists of any number of "tables". 
Each table has any number of "records".
Each record consists of "fields", with each field
having a field name and type, and a value for that field.
Every record within the same table has the same field names
and types, with only the values changing between records.

Values:
  DATABASE is the name of the database, default is DATABASE_NAME
  DEFAULT is the default valyue for a field(column).
  FIELD is the name of a field(column).
  HOST is the network name of the database server
  PORT is a network port number for the database server
  TABLE is the name of a database table.
  TYPE is the type of field(column) using standard mysql types.
  DUMP FILE is the dump file name to be saved or restored.
USAGE1
    print STDERR <<USAGE2 if ! $interactive;

Options:
  --commands=FILE       commands file, default none, - means stdin
  --debug               turns on debug output
  --database=DATABASE   database name, default is oscar
  --host=HOST           database host, default localhost
  --scripts_dir=DIR     database scripts directory, default SCRIPTS_DIR
  --nodebug             turns off debug output
  --password=PASSWORD   database password
  --port=PORT           database port number, default 3306
  --noverbose           turns off verbose output
  --type=DATABASETYPE   set the database type, default is mysql
  --user USER           database user id, default anonymous if non-root
  --verbose             turns on verbose output
  --version             prints version number and exits program
  --init=DATABASE_TYPE  initialize ODA.
  --reset               re-initialize ODA to zero.
USAGE2
    print STDERR <<USAGE5;

Raw commands:
 $0 [options] dump [DUMP FILE]
 $0 [options] restore [DUMP FILE] 
 $0 [options] create_database
 $0 [options] drop_database
 $0 [options] list_databases
 $0 [options] list_fields TABLE
 $0 [options] list_tables
 $0 [options] reset_password
 $0 [options] shortcuts
 $0 [options] <SHORTCUTS>



USAGE5
    if ( @error_strings ) {
    print STDERR "\n";
    foreach my $error_string ( @error_strings ) {
        print STDERR "$0: $error_string\n";
    }
    }
    exit $exit_status if defined $exit_status;
}

#=============================================================

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("bundling");    # allow -a -b or -ab
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

# parse command line options
GetOptions( \%options,
        'commands|c=s',
        'debug!',
        'database|d=s',
        'scripts_dir|f=s',
        'help',
        'host|h=s',
        'opset=s',
        'output|o=s',
        'password=s',
        'port|p=i',
        'raw!',
        'table_parameters=s',
        'type|t=s',
        'user|u=s',
        'verbose!',
        'version',
        'init|bootstrap=s',
        'reset')
    || usage(0, 1);
print "$0: after GetOptions ARGV=<@ARGV>\n" if $options{debug};
OSCAR::Utils::print_hash( "", "$0: options after GetOptions", \%options) if $options{debug};

# --help flag just prints out usage information and exits
if ( exists $options{help} ) {
    usage(0, 0);
}

# --version flag just prints out version numbers and exits
if ( exists $options{version} ) {
    require OSCAR::oda;
    my $server_version = OSCAR::oda::database_server_version( \%options, undef );
    print "oda version: ODA_VERSION" . 
    ( ( defined $server_version ) ? 
      " database server version: $server_version" : "" ) .
    "\n";
    exit 0;
}

# --init flag bootstraps ODA, therefore it is a special case
if ( exists $options{init} ) {
    print "Initializing ODA: $options{init}\n";
    require OSCAR::ODA::Bootstrap;
    if (OSCAR::ODA::Bootstrap::bootstrap_oda ($options{init})) {
        die "ERROR: Impossible to bootstrap the database";
    }
    print "\nSuccessfully initialized ODA\n\n";
    exit 0;
}

if ( exists $options{reset} ) {
    print "Reseting ODA\n";
    $ENV{OSCAR_VERBOSE}=5;
    
    #
    # Make sure the database server is actually running
    #
    require OSCAR::SystemServices;
    require OSCAR::SystemServicesDefs;
    my $db_type = "mysql"; # TOOD: We currently support only mysql, we need to
                           # be able to detect that automatically.
    if ($db_type eq "mysql") {
        OSCAR::SystemServices::system_service (OSCAR::SystemServicesDefs::MYSQL(),
            OSCAR::SystemServicesDefs::RESTART());
    } else {
        carp "Restart of postgres not yet supported";
    }
    
    #
    # We drop the database
    #
    print "Dropping the OSCAR database";
    my $cmd = "/usr/bin/mysqladmin drop oscar --force";
    system $cmd;
        
    #
    # We remove the oda prereq
    #
    print "Removing ODA prereqs\n";
    # We get the configuration from the OSCAR configuration file.
    require OSCAR::ConfigManager;
    require OSCAR::Startover;
    my $oscar_configurator = OSCAR::ConfigManager->new();
    if ( ! defined ($oscar_configurator) ) {
        die "ERROR: Impossible to get the OSCAR configuration\n";
    }
    my $config = $oscar_configurator->get_config();

    # Then we deal with prereq.cfg
    my $dir;
    if (defined $ENV{OSCAR_HOME}) {
        $dir = "$ENV{OSCAR_HOME}/packages/oda/";
    } else {
        $dir = "/usr/share/oscar/prereqs/oda/";
    }
    my $prereq_cmd = $config->{'binaries_path'} . "/install_prereq";
    OSCAR::Startover::remove_prereq ($prereq_cmd, $dir);
    
    #
    # We remove the oda symlink
    #
    my @data = Config::config_re("vendorlib");
    if (scalar (@data) > 1 || scalar (@data) == 0) {
        die "ERROR: Impossible to know where are the Perl modules";
    }
    my ($key, $path) = split ("=", $data[0]);
    $path =~ m/\'(.*)\'/;
    $path = $1;
    my $dest = "$path/OSCAR/oda.pm";
    print "Removing $dest\n";
    unlink ($dest);
    
    exit 0;
}

# else if no commands file was specified, and we have one
# or more aguments, use them as a single command, first
# expanding any simple/abbreviated command/shortcuts/functions
elsif ( @ARGV ) {
    print "$0: executing <(" . join( ',', @ARGV ) . ")>\n"
    if $options{debug};
    my @args = ();
    foreach my $arg (@ARGV){
        push @args, lc($arg); 
    }
    my @error_strings =
        execute_simple_command( \%options, \@args );
    errexit( 1, @error_strings ) if @error_strings;
    exit 0;
}

# else if no commands file was specified, and we have
# no arguments, go into interactive mode

else {
    print "oda> ";
    my $partial_interactive_line = "";
    my $interactive_line;
    my $last_status = 0;

    while ( 1 ) {
        $interactive_line = Complete('', \@simple_commands);
        if ( $partial_interactive_line ne "" ) {
            $interactive_line = $partial_interactive_line . $interactive_line;
            $partial_interactive_line = "";
        }
        if ( $interactive_line =~ /\\$/ ) {
            $interactive_line =~ s/\\$//;
            $partial_interactive_line = $interactive_line;
            print "> ";
        } else {
            my $separated_cmd_args_ref =
            separate_command_arguments( \%options,
                             $interactive_line );
            print "$0: executing <(" . 
            join( ',', @$separated_cmd_args_ref ) . ")>\n"
            if $options{debug};
            if ( @$separated_cmd_args_ref ) {
                if ( $$separated_cmd_args_ref[0] eq "help" ) {
                    usage( 1 );
                } elsif ( $$separated_cmd_args_ref[0] eq "quit"
                      || 
                      $$separated_cmd_args_ref[0] eq "exit" 
                      ||
                      $$separated_cmd_args_ref[0] eq "\\q" ) {
                    exit $last_status;
                } elsif ( $$separated_cmd_args_ref[0] eq "version" ) {
                    require OSCAR::oda;
                    my $server_version = 
                    OSCAR::oda::database_server_version( \%options, undef );
                    print "oda version: ODA_VERSION" . 
                    ( ( defined $server_version ) ? 
                      " database server version: $server_version" : "" ) .
                      "\n";
                } else {
                    my @error_strings =
                    execute_simple_command( \%options,
                                            $separated_cmd_args_ref );
                    $last_status = ( @error_strings ) ? 0 : 1;
                    print STDERR ( shift @error_strings ) . "\n" while @error_strings;
                }
            }
            print "oda> ";
        }
    }
    print "\n";
    if ( $partial_interactive_line ne "" ) {
        my $separated_cmd_args_ref =
            separate_command_arguments( \%options,
                             $partial_interactive_line );
        print "$0: executing <(" . 
            join( ',', @$separated_cmd_args_ref ) . ")>\n"
            if $options{debug};
        if ( @$separated_cmd_args_ref ) {
            if ( $$separated_cmd_args_ref[0] eq "help" ) {
            usage( 1 );
            } elsif ( $$separated_cmd_args_ref[0] eq "quit"
                  || 
                  $$separated_cmd_args_ref[0] eq "exit" 
                  ||
                  $$separated_cmd_args_ref[0] eq "\\q" ) {
            exit $last_status;
            } elsif ( $$separated_cmd_args_ref[0] eq "version" ) {
            require OSCAR::oda;
            my $server_version = 
                OSCAR::oda::database_server_version( \%options, undef );
            print "oda version: ODA_VERSION" .
                ( ( defined $server_version ) ? 
                  " database server version: $server_version" : "" ) .
                  "\n";
            } else {
            my @error_strings =
                execute_simple_command( \%options,
                                        $separated_cmd_args_ref );
            $last_status = ( @error_strings ) ? 0 : 1;
            print STDERR ( shift @error_strings ) . "\n" while @error_strings;
            }
        }
    }
    exit $last_status;
}

__END__

=head1 NAME

oda, a command line tool for the management of the OSCAR DAtabase (ODA).

=head1 SYNOPSIS

oda OPTIONS

=head1 DESCRIPTION

The database resides in a single directory, and consists of any number of "tables". Each table has any number of "records". Each record consists of "fields", with each field having a field name and type, and a value for that field. Every record within the same table has the same field names and types, with only the values changing between records.

Values:
  DATABASE is the name of the database, default is DATABASE_NAME
  DEFAULT is the default valyue for a field(column).
  FIELD is the name of a field(column).
  HOST is the network name of the database server
  PORT is a network port number for the database server
  TABLE is the name of a database table.
  TYPE is the type of field(column) using standard mysql types.

USAGE1
    print STDERR <<USAGE2 if ! $interactive;

Options:
  --commands=FILE     commands file, default none, - means stdin
  --debug             turns on debug output
  --database=DATABASE database name, default is oscar
  --host=HOST         database host, default localhost
  --scripts_dir=DIR   database scripts directory, default SCRIPTS_DIR
  --nodebug           turns off debug output
  --password=PASSWORD database password
  --port=PORT         database port number, default 3306
  --noverbose         turns off verbose output
  --type=DATABASETYPE set the database type, default is mysql
  --user USER         database user id, default anonymous if non-root
  --verbose           turns on verbose output
  --version           prints version number and exits program
  --init              initialize ODA.
USAGE2
    print STDERR <<USAGE5;

Raw commands:
 $0 [options] dump [DUMP FILE]
 $0 [options] restore [DUMP FILE] 
 $0 [options] create_database
 $0 [options] drop_database
 $0 [options] list_databases
 $0 [options] list_fields TABLE
 $0 [options] list_tables
 $0 [options] reset_password
 $0 [options] shortcuts
 $0 [options] <SHORTCUTS>

=head1 AUTHOR

=over 8

=item DongInn Kim, The Trustees of Indiana University.

=back

=head1 SEE ALSO

perl(1)

=cut
