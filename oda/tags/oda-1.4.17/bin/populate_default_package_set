#! /usr/bin/perl

# Copyright 2003 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright 2005
#           Bernard Li <bli@bcgsc.ca>
# Copyright (c) 2005-2006 The Trustees of Indiana University.
#                         All rights reserved.
# Copyright (c) 2009 Geoffroy Vallee <valleegr at ornl dot gov>
#                    Oak Ridge National Laboratory
#                    All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# $Id$

#
# This script forces the "Default" package set to include
# the installable package names, and only the installable
# package names.
# This program updates the "Groups" table and populates the
# "Group_Packages", "Image_Package_Status" and "Node_Package_Status" tables.
#

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Database;
use OSCAR::Database_generic;
use OSCAR::Logger;
use OSCAR::oda;
use OSCAR::Package;
use Getopt::Long;

my ($verbose, $debug);
GetOptions(
            "debug"     => \$debug,
            "verbose"   => \$verbose,
          );

# We set the verbose mode based on the different passed options.
my $initial_verbose_value = 0;
$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});
if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
}
if ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
}

my %options = ();
my @errors = ();

my @nics_results = ();
my $OSCAR_SERVER_NODE = "oscar_server";

OSCAR::Logger::oscar_log_subsection "Populating default package set";

# Determine if it is the first time installation or not.
# If nics table is already filled in, this is not first time installation.
# and skip the whole process of this script (populate_default_package_set).
OSCAR::Database::get_nics_info_with_node($OSCAR_SERVER_NODE,
                                         \@nics_results,
                                         \%options,
                                         \@errors);

exit 0 if(@nics_results);


# name of default packages set
my $DEFAULT = "Default";

# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.

# START LOCKING FOR NEST && open the database

my @tables = ("Cluster","Nodes", "Packages", "Node_Package_Status",
              "Image_Package_Status", "Group_Packages", "Groups");

#if(! locking("write", \%options, \@tables, \@errors)){
#    die "DB_DEBUG>$0:\n====> cannot connect to oda database";
#}

# Make a 'Default' group selected
OSCAR::Logger::oscar_log_subsection "Make a 'Default' group selected";
if (set_groups_selected($DEFAULT, \%options, \@errors) != 1) {
    die "ERROR: Impossible to set the Default group in ODA";
}

# get a list of all installable packages
OSCAR::Logger::oscar_log_subsection "Get a list of all installable packages";
my @installable_packages = ();
if (get_selected_group_packages(\@installable_packages,
                                \%options,
                                \@errors,
                                undef,
                                undef) != 1) {
    die "ERROR: Impossible to the selected group of packages: "
        . join (", ", @installable_packages);
}


# get the list of package_sets
oscar_log_subsection "Checking for existence of package set <$DEFAULT>";
my @package_set_names = ();
@errors = ("cannot read the list of package_sets from the oda database");
OSCAR::Database::get_group_packages_with_groupname ($DEFAULT,
                                                    \@package_set_names,
                                                    \%options,
                                                    \@errors);

# if we already have a package set named "Default", ...
my $success = 1;

if ( @package_set_names )  {
    # If the default package set is already setup, do nothing.
} else {
    # create an empty default package set
    oscar_log_subsection "Initializing package set <$DEFAULT>";
    @errors = ("error creating package set <$DEFAULT>");
    if (OSCAR::Database::set_groups($DEFAULT,
                                    \%options,
                                    \@errors,
                                    undef) != 1) {
        die "ERROR: Impossible to create the default package set";
    }
    if (OSCAR::Database::set_groups_selected($DEFAULT,
                                             \%options,
                                             \@errors) != 1) {
        die "ERROR: Impossible to select the default package set";
    }

    # populate the default package set with all installable packages
    foreach my $package_ref ( @installable_packages ) {
        my $package_id = $$package_ref{id};
        my $package_name = $$package_ref{package};

        OSCAR::Logger::oscar_log_subsection "Adding package <$package_name> ".
            "to package set <$DEFAULT>";
        my %field_value_hash = ("package_id" => $package_id,
                                  "group_name" => $DEFAULT);
        my $error_msg="error adding package <$package_name> to package set ".
                      "<$DEFAULT>";
        @errors = ($error_msg);
        if ( ! OSCAR::Database_generic::insert_into_table(\%options, 
                                                        "Group_Packages", 
                                                        \%field_value_hash,
                                                        \@errors) ){
            $success = 0;
            warn "DB_DEBUG>$0:\n====> $error_msg";
        }
	}
}

# Insert into "Node_Package_Status" table
# If the data is already there, just update its status.
OSCAR::Logger::oscar_log_subsection "Update the Node_Package_Status table";
foreach my $package_ref (@installable_packages){
    my $package_id = $$package_ref{id};
    my $package_name = $$package_ref{package};
 
    # installable tag is kept on config.xml and this is an easier way
    # to avoid tracing not-installable packages (e.g., networking).
    my $requested = 2;
    my @pkg_list = ($package_name);
    $success = OSCAR::Database::update_node_package_status(
                    \%options,
                    $OSCAR_SERVER_NODE,
                    \@pkg_list,
                    $requested,
                    \@errors,
                    undef);
}


# UNLOCKING FOR NEST
#unlock(\%options, \@errors);

# TODO - GV: this is a stupid test, $success only has the return code of the 
# last update.
if ( $success ) {
    exit 0;
} else {
    die "DB_DEBUG>$0:\n====> error setting up default values for package set <$DEFAULT>";
}

$ENV{OSCAR_VERBOSE} = $initial_verbose_value;

__END__

=head1 NAME

This script is part of the OSCAR software (http://oscar.openclustergroup.org/) and populate the OSCAR database (ODA) with the default OSCAR package set.

=head1 SYNOPSIS

populate_default_package_set

=head1 OPTIONS

=over 8

=item --verbose

Display information during execution (set OSCAR_VERBOSE to 5).

=item --debug

Display even more information (set OSCAR_VERBOSE to 10).

=back

=head1 AUTHORS

=item Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>

=item Bernard Li <bli@bcgsc.ca>

=item Indiana University

=item Geoffroy Vallee <valleegr at ornl dot gov>

=head1 SEE ALSO

perl(1)

=cut
